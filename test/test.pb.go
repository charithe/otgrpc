// Code generated by protoc-gen-gogo.
// source: test.proto
// DO NOT EDIT!

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	TestRequest
	TestResponse
*/
package test

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TestRequest struct {
	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *TestRequest) Reset()                    { *m = TestRequest{} }
func (m *TestRequest) String() string            { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()               {}
func (*TestRequest) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{0} }

func (m *TestRequest) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

type TestResponse struct {
	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *TestResponse) Reset()                    { *m = TestResponse{} }
func (m *TestResponse) String() string            { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()               {}
func (*TestResponse) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{1} }

func (m *TestResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*TestRequest)(nil), "test.TestRequest")
	proto.RegisterType((*TestResponse)(nil), "test.TestResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestSvc service

type TestSvcClient interface {
	UnaryRPC(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	ClientStreamRPC(ctx context.Context, opts ...grpc.CallOption) (TestSvc_ClientStreamRPCClient, error)
	ServerStreamRPC(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (TestSvc_ServerStreamRPCClient, error)
	BidiStreamRPC(ctx context.Context, opts ...grpc.CallOption) (TestSvc_BidiStreamRPCClient, error)
}

type testSvcClient struct {
	cc *grpc.ClientConn
}

func NewTestSvcClient(cc *grpc.ClientConn) TestSvcClient {
	return &testSvcClient{cc}
}

func (c *testSvcClient) UnaryRPC(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := grpc.Invoke(ctx, "/test.TestSvc/UnaryRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testSvcClient) ClientStreamRPC(ctx context.Context, opts ...grpc.CallOption) (TestSvc_ClientStreamRPCClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TestSvc_serviceDesc.Streams[0], c.cc, "/test.TestSvc/ClientStreamRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &testSvcClientStreamRPCClient{stream}
	return x, nil
}

type TestSvc_ClientStreamRPCClient interface {
	Send(*TestRequest) error
	CloseAndRecv() (*TestResponse, error)
	grpc.ClientStream
}

type testSvcClientStreamRPCClient struct {
	grpc.ClientStream
}

func (x *testSvcClientStreamRPCClient) Send(m *TestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testSvcClientStreamRPCClient) CloseAndRecv() (*TestResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testSvcClient) ServerStreamRPC(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (TestSvc_ServerStreamRPCClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TestSvc_serviceDesc.Streams[1], c.cc, "/test.TestSvc/ServerStreamRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &testSvcServerStreamRPCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestSvc_ServerStreamRPCClient interface {
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type testSvcServerStreamRPCClient struct {
	grpc.ClientStream
}

func (x *testSvcServerStreamRPCClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testSvcClient) BidiStreamRPC(ctx context.Context, opts ...grpc.CallOption) (TestSvc_BidiStreamRPCClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TestSvc_serviceDesc.Streams[2], c.cc, "/test.TestSvc/BidiStreamRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &testSvcBidiStreamRPCClient{stream}
	return x, nil
}

type TestSvc_BidiStreamRPCClient interface {
	Send(*TestRequest) error
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type testSvcBidiStreamRPCClient struct {
	grpc.ClientStream
}

func (x *testSvcBidiStreamRPCClient) Send(m *TestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testSvcBidiStreamRPCClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TestSvc service

type TestSvcServer interface {
	UnaryRPC(context.Context, *TestRequest) (*TestResponse, error)
	ClientStreamRPC(TestSvc_ClientStreamRPCServer) error
	ServerStreamRPC(*TestRequest, TestSvc_ServerStreamRPCServer) error
	BidiStreamRPC(TestSvc_BidiStreamRPCServer) error
}

func RegisterTestSvcServer(s *grpc.Server, srv TestSvcServer) {
	s.RegisterService(&_TestSvc_serviceDesc, srv)
}

func _TestSvc_UnaryRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestSvcServer).UnaryRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestSvc/UnaryRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestSvcServer).UnaryRPC(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestSvc_ClientStreamRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestSvcServer).ClientStreamRPC(&testSvcClientStreamRPCServer{stream})
}

type TestSvc_ClientStreamRPCServer interface {
	SendAndClose(*TestResponse) error
	Recv() (*TestRequest, error)
	grpc.ServerStream
}

type testSvcClientStreamRPCServer struct {
	grpc.ServerStream
}

func (x *testSvcClientStreamRPCServer) SendAndClose(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testSvcClientStreamRPCServer) Recv() (*TestRequest, error) {
	m := new(TestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestSvc_ServerStreamRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestSvcServer).ServerStreamRPC(m, &testSvcServerStreamRPCServer{stream})
}

type TestSvc_ServerStreamRPCServer interface {
	Send(*TestResponse) error
	grpc.ServerStream
}

type testSvcServerStreamRPCServer struct {
	grpc.ServerStream
}

func (x *testSvcServerStreamRPCServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestSvc_BidiStreamRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestSvcServer).BidiStreamRPC(&testSvcBidiStreamRPCServer{stream})
}

type TestSvc_BidiStreamRPCServer interface {
	Send(*TestResponse) error
	Recv() (*TestRequest, error)
	grpc.ServerStream
}

type testSvcBidiStreamRPCServer struct {
	grpc.ServerStream
}

func (x *testSvcBidiStreamRPCServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testSvcBidiStreamRPCServer) Recv() (*TestRequest, error) {
	m := new(TestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TestSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestSvc",
	HandlerType: (*TestSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryRPC",
			Handler:    _TestSvc_UnaryRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamRPC",
			Handler:       _TestSvc_ClientStreamRPC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamRPC",
			Handler:       _TestSvc_ServerStreamRPC_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidiStreamRPC",
			Handler:       _TestSvc_BidiStreamRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}

func (m *TestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTest(dAtA, i, uint64(len(m.Request)))
		i += copy(dAtA[i:], m.Request)
	}
	return i, nil
}

func (m *TestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTest(dAtA, i, uint64(len(m.Response)))
		i += copy(dAtA[i:], m.Response)
	}
	return i, nil
}

func encodeFixed64Test(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Test(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TestRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}

func (m *TestResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}

func sovTest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("test.proto", fileDescriptorTest) }

var fileDescriptorTest = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xd4, 0xb9, 0xb8, 0x43, 0x52,
	0x8b, 0x4b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x24, 0xb8, 0xd8, 0x8b, 0x20, 0x4c,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0x57, 0x49, 0x8b, 0x8b, 0x07, 0xa2, 0xb0, 0xb8,
	0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x8a, 0x8b, 0xa3, 0x08, 0xca, 0x86, 0x2a, 0x85, 0xf3, 0x8d,
	0x7e, 0x30, 0x72, 0xb1, 0x83, 0x14, 0x07, 0x97, 0x25, 0x0b, 0x19, 0x73, 0x71, 0x84, 0xe6, 0x25,
	0x16, 0x55, 0x06, 0x05, 0x38, 0x0b, 0x09, 0xea, 0x81, 0xed, 0x47, 0xb2, 0x50, 0x4a, 0x08, 0x59,
	0x08, 0xa2, 0x5d, 0x89, 0x41, 0xc8, 0x86, 0x8b, 0xdf, 0x39, 0x27, 0x33, 0x35, 0xaf, 0x24, 0xb8,
	0xa4, 0x28, 0x35, 0x31, 0x97, 0x14, 0xbd, 0x1a, 0x8c, 0x20, 0xdd, 0xc1, 0xa9, 0x45, 0x65, 0xa9,
	0x45, 0xa4, 0xeb, 0x36, 0x00, 0xe9, 0xe6, 0x75, 0xca, 0x4c, 0xc9, 0x24, 0xc7, 0x66, 0x03, 0x46,
	0x27, 0x9e, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x31, 0x89,
	0x0d, 0x1c, 0xd4, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38, 0x89, 0x01, 0x5c, 0x78, 0x01,
	0x00, 0x00,
}
